name: build

on:
  push:
    branches: [master, develop, build]
  pull_request:
    branches: [develop]

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-22.04, ubuntu-latest]
        os: [ubuntu-22.04]  # TODO!
        # python-version: ["3.11", "3.12"]
        python-version: ["3.12"]  # TODO!
    defaults:
      run:
        shell: bash
    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      BUILD_MODE: release
      RUST_BACKTRACE: 1
      # https://github.com/Mozilla-Actions/sccache-action
      SCCACHE_GHA_ENABLED: "true"
      SCCACHE_CACHE_MULTIARCH: 1
      RUSTC_WRAPPER: "sccache"
      CC: "sccache clang"
      CXX: "sccache clang"

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: nautilus
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: false
          dotnet: false
          haskell: false
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Install runner dependencies
        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Set up Rust toolchain
        run: |
          rustup toolchain add --profile minimal stable --component clippy,rustfmt

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Python version
        run: |
          version=$(bash scripts/python-version.sh)
          echo "PYTHON_VERSION=$version" >> $GITHUB_ENV

      - name: Get Poetry version from poetry-version
        run: |
          version=$(cat poetry-version)
          echo "POETRY_VERSION=$version" >> $GITHUB_ENV

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit

      - name: Cached pre-commit
        id: cached-pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Cached cargo
        id: cached-cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Cache Python site-packages
        id: cached-site-packages
        uses: actions/cache@v4
        with:
          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages
          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages
          restore-keys: |
            ${{ runner.os }}-site-packages-

      - name: Cached test data
        id: cached-testdata-large
        uses: actions/cache@v4
        with:
          path: tests/test_data/large
          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}
          restore-keys: ${{ runner.os }}-large-files-

      - name: Run pre-commit
        run: |
          # pre-commit run --hook-stage manual gitlint-ci
          pre-commit run --all-files

      - name: Install Nautilus CLI and run init postgres
        run: |
          make install-cli
          nautilus database init --schema ${{ github.workspace }}/schema
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DATABASE: nautilus

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Run nautilus_core tests
        run: make cargo-test

      - name: Update version in pyproject.toml
        run: |
          current_version=$(grep '^version = ' pyproject.toml | cut -d '"' -f2)
          date_suffix=".dev$(date +%Y%m%d)"
          build_number=${{ github.run_number }}
          new_version="${current_version}${date_suffix}+${build_number}"
          if [[ $current_version != *"$date_suffix" ]] || [[ $current_version != *"+${build_number}" ]]; then
            sed -i.bak "s/^version = \".*\"/version = \"${new_version}\"/" pyproject.toml
            rm -f pyproject.toml.bak  # Clean up backup file
            echo "Updated version to ${new_version}"
          else
            echo "Version already updated to ${new_version}"
          fi

      - name: Generate updated lock file
        run: poetry lock --no-update

      - name: Build Python wheel
        run: |
          poetry build --format wheel
          ls -lh dist/

      - name: Install Python wheel
        run: |
          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt
          python -m pip install -r requirements-test.txt
          pip install "$(ls dist/*.whl)"

      # - name: Run tests  # TODO!
      #   run: |
      #     pytest --ignore=tests/performance_tests --new-first --failed-first
      #     make test-examples
      #
      # # Run codspeed for latest python-version only  # TODO!
      # - name: Run benchmarks
      #   if: ${{ matrix.python-version == '3.12' }}
      #   uses: CodSpeedHQ/action@v3
      #   with:
      #     token: ${{ secrets.CODSPEED_TOKEN }}
      #     run: pytest tests/performance_tests --benchmark-disable-gc --codspeed

      - name: Set release output
        if: github.event_name == 'push'
        id: vars
        run: |
          echo "ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)" >> $GITHUB_ENV
          cd dist
          echo "ASSET_NAME=$(printf '%s\0' * | awk 'BEGIN{RS="\0"} {print;  exit}')" >> $GITHUB_ENV

      - name: Upload wheel artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  # build-macos:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [macos-latest]
  #       python-version: ["3.11", "3.12"]
  #   defaults:
  #     run:
  #       shell: bash
  #   name: build - python ${{ matrix.python-version }} (${{ matrix.os }})
  #   runs-on: ${{ matrix.os }}
  #   env:
  #     BUILD_MODE: release
  #     RUST_BACKTRACE: 1
  #     # https://github.com/Mozilla-Actions/sccache-action
  #     SCCACHE_GHA_ENABLED: "true"
  #     SCCACHE_CACHE_MULTIARCH: 1
  #     RUSTC_WRAPPER: "sccache"
  #     CC: "sccache clang"
  #     CXX: "sccache clang"
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Run sccache-cache
  #       uses: mozilla-actions/sccache-action@v0.0.6
  #
  #     - name: Free disk space
  #       run: |
  #         sudo rm -rf ~/Library/Caches/*
  #         sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*
  #         sudo rm -rf /Library/Developer/CommandLineTools
  #
  #     - name: Set up Rust toolchain
  #       run: |
  #         rustup toolchain add --profile minimal stable --component clippy,rustfmt
  #
  #     - name: Set up Python environment
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #
  #     - name: Get Python version
  #       run: |
  #         version=$(bash scripts/python-version.sh)
  #         echo "PYTHON_VERSION=$version" >> $GITHUB_ENV
  #
  #     - name: Get Poetry version from poetry-version
  #       run: |
  #         version=$(cat poetry-version)
  #         echo "POETRY_VERSION=$version" >> $GITHUB_ENV
  #
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         version: ${{ env.POETRY_VERSION }}
  #
  #     - name: Install build dependencies
  #       run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit
  #
  #     - name: Cached pre-commit
  #       id: cached-pre-commit
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.cache/pre-commit
  #         key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
  #
  #     - name: Cached cargo
  #       id: cached-cargo
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: ${{ runner.os }}-cargo-
  #
  #     - name: Set poetry cache-dir
  #       run: echo "POETRY_CACHE_DIR=$(poetry config cache-dir)" >> $GITHUB_ENV
  #
  #     - name: Cached poetry
  #       id: cached-poetry
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.POETRY_CACHE_DIR }}
  #         key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}
  #
  #     - name: Cached test data
  #       id: cached-testdata-large
  #       uses: actions/cache@v4
  #       with:
  #         path: tests/test_data/large
  #         key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}
  #         restore-keys: ${{ runner.os }}-large-files-
  #
  #     - name: Run pre-commit
  #       run: |
  #         # pre-commit run --hook-stage manual gitlint-ci
  #         pre-commit run --all-files
  #
  #     - name: Install cargo-nextest
  #       uses: taiki-e/install-action@v2
  #       with:
  #         tool: nextest
  #
  #     - name: Run nautilus_core tests
  #       run: make cargo-test
  #
  #     - name: Update version in pyproject.toml
  #       run: |
  #         current_version=$(grep '^version = ' pyproject.toml | cut -d '"' -f2)
  #         date_suffix=".dev$(date +%Y%m%d)"
  #         build_number=${{ github.run_number }}
  #         new_version="${current_version}${date_suffix}+${build_number}"
  #         if [[ $current_version != *"$date_suffix" ]] || [[ $current_version != *"+${build_number}" ]]; then
  #           sed -i.bak "s/^version = \".*\"/version = \"${new_version}\"/" pyproject.toml
  #           rm -f pyproject.toml.bak  # Clean up backup file
  #           echo "Updated version to ${new_version}"
  #         else
  #           echo "Version already updated to ${new_version}"
  #         fi
  #
  #     - name: Generate updated lock file
  #       run: poetry lock --no-update
  #
  #     - name: Build Python wheel
  #       run: |
  #         poetry build --format wheel
  #         ls -lh dist/
  #
  #     - name: Install Python wheel
  #       run: |
  #         poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt
  #         python -m pip install -r requirements-test.txt
  #         pip install "$(ls dist/*.whl)"
  #
  #     - name: Run tests
  #       run: |
  #         pytest --ignore=tests/performance_tests --new-first --failed-first
  #         make test-examples
  #
  #     - name: Set release output
  #       if: github.event_name == 'push'
  #       id: vars
  #       run: |
  #         echo "ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)" >> $GITHUB_ENV
  #         cd dist
  #         echo "ASSET_NAME=$(printf '%s\0' * | awk 'BEGIN{RS="\0"} {print;  exit}')" >> $GITHUB_ENV
  #
  #     - name: Upload wheel artifact
  #       if: github.event_name == 'push'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.ASSET_NAME }}
  #         path: ${{ env.ASSET_PATH }}
  #
  # build-windows:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest]
  #       python-version: ["3.11", "3.12"]
  #   defaults:
  #     run:
  #       shell: bash
  #   name: build - python ${{ matrix.python-version }} (${{ matrix.os }})
  #   runs-on: ${{ matrix.os }}
  #   env:
  #     BUILD_MODE: debug  # Not building wheels, so debug is fine
  #     RUST_BACKTRACE: 1
  #     # https://github.com/Mozilla-Actions/sccache-action
  #     SCCACHE_GHA_ENABLED: "true"
  #     SCCACHE_CACHE_MULTIARCH: 1
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Run sccache-cache
  #       uses: mozilla-actions/sccache-action@v0.0.6
  #
  #     - name: Set sccache-cache env vars
  #       run: |
  #         echo RUSTC_WRAPPER="${{ env.SCCACHE_PATH }}" >> $GITHUB_ENV
  #         echo CMAKE_C_COMPILER_LAUNCHER="${{ env.SCCACHE_PATH }}" >> $GITHUB_ENV
  #         echo CMAKE_CXX_COMPILER_LAUNCHER="${{ env.SCCACHE_PATH }}" >> $GITHUB_ENV
  #
  #     - name: Free disk space
  #       run: |
  #         rm -rf "/c/Program Files/dotnet"
  #         rm -rf "/c/Program Files (x86)/Microsoft Visual Studio/2019"
  #
  #     - name: Set up Rust toolchain
  #       run: |
  #         rustup toolchain add --profile minimal stable --component clippy,rustfmt
  #
  #     - name: Set up Python environment
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #
  #     - name: Get Python version
  #       run: |
  #         version=$(bash scripts/python-version.sh)
  #         echo "PYTHON_VERSION=$version" >> $GITHUB_ENV
  #
  #     - name: Get Poetry version from poetry-version
  #       run: |
  #         version=$(cat poetry-version)
  #         echo "POETRY_VERSION=$version" >> $GITHUB_ENV
  #
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         version: ${{ env.POETRY_VERSION }}
  #
  #     - name: Install build dependencies
  #       run: python -m pip install --upgrade pip setuptools wheel pre-commit
  #
  #     - name: Cached cargo
  #       id: cached-cargo
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: ${{ runner.os }}-cargo-
  #
  #     - name: Set poetry cache-dir
  #       run: echo "POETRY_CACHE_DIR=$(poetry config cache-dir)" >> $GITHUB_ENV
  #
  #     - name: Cached poetry
  #       id: cached-poetry
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.POETRY_CACHE_DIR }}
  #         key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}
  #
  #     - name: Cached test data
  #       id: cached-testdata-large
  #       uses: actions/cache@v4
  #       with:
  #         path: tests/test_data/large
  #         key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}
  #         restore-keys: ${{ runner.os }}-large-files-
  #
  #     # Run tests without parallel build (avoids linker errors)
  #     - name: Run tests
  #       run: |
  #         poetry install --with test --all-extras
  #         poetry run pytest --ignore=tests/performance_tests --new-first --failed-first
  #       env:
  #         PARALLEL_BUILD: false

  publish-wheels:
    name: publish-packages
    runs-on: ubuntu-latest
    # needs: [build-linux, build-macos]  # TODO!
    needs: [build-linux]
    if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/build')
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
      CLOUDFLARE_R2_BUCKET_NAME: "packages"
      CLOUDFLARE_R2_REGION: "auto"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: '*.whl'

      - name: Configure AWS CLI for Cloudflare R2
        run: |
          set -euo pipefail
          echo "Configuring AWS CLI for Cloudflare R2..."

          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${{ env.CLOUDFLARE_R2_REGION }}" >> ~/.aws/config
          echo "output=json" >> ~/.aws/config
          echo "AWS CLI configuration completed"

      - name: Upload new wheels to Cloudflare R2
        run: |
          set -euo pipefail
          echo "Uploading new wheels to Cloudflare R2..."

          echo "Initial dist/ contents:"
          ls -la dist/
          find dist/ -type f -name "*.whl" -ls

          # Create clean directory for real files
          mkdir -p dist/all

          # Copy all files into dist/all/ to resolve symlinks
          find dist/ -type f -name "*.whl" -exec cp -L {} dist/all/ \;

          # First check for any wheels
          if ! find dist/all/ -type f -name "*.whl" >/dev/null 2>&1; then
            echo "No wheels found in dist/all/, exiting"
            exit 1
          fi

          echo "Contents of dist/all/:"
          ls -la dist/all/

          wheel_count=0
          for file in dist/all/*.whl; do
            echo "File details for $file:"
            ls -l "$file"
            file "$file"

            if [ ! -f "$file" ]; then
              echo "Warning: '$file' is not a regular file, skipping"
              continue
            fi

            wheel_count=$((wheel_count + 1))
            echo "Found wheel: $file"
            echo "sha256:$(sha256sum "$file" | awk '{print $1}')"

            echo "Uploading $file..."
            if ! aws s3 cp "$file" "s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/" \
              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \
              --content-type "application/zip"; then
              echo "Failed to upload $file"
              exit 1
            fi
          done

          if [ "$wheel_count" -eq 0 ]; then
            echo "No wheel files found in dist directory"
            exit 1
          fi

          echo "Successfully uploaded $wheel_count wheel files"

      - name: Remove old wheels from Cloudflare R2
        run: |
          set -euo pipefail
          echo "Cleaning up old wheels in Cloudflare R2..."

          files=$(aws s3 ls "s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')
          if [ -z "$files" ]; then
              echo "No files found for cleanup"
              exit 0
          fi

          echo "Current wheels:"
          echo "$files"
          echo "---"

          # Process each file
          for file in $files; do
              if [[ "$file" == "index.html" ]]; then
                  echo "Skipping index.html"
                  continue
              fi

              echo "Processing: $file"

              # Extract the platform-specific part (everything after the version number)
              platform=$(echo "$file" | sed -E 's/.*\+[0-9]+-(.+)\.whl/\1/')

              # Extract the base name and version without build number
              base=$(echo "$file" | sed -E "s/(.+)-[0-9]+\.[0-9]+\.[0-9]+\.dev[0-9]+\+[0-9]+-${platform}\.whl/\1/")

              # Find latest version for this base+platform combination
              latest=$(echo "$files" | grep "${base}.*${platform}\.whl$" | sort -r | head -n 1)

              if [[ "$file" != "$latest" ]]; then
                  echo "Deleting old wheel: $file"
                  aws s3 rm "s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}
              else
                  echo "Keeping latest wheel: $file"
              fi
          done
          echo "Old wheels cleanup completed"

      - name: Generate index.html for Cloudflare R2
        run: |
          set -euo pipefail
          echo "Generating package index..."
          echo '<!DOCTYPE html>' > index.html
          echo '<html><head><title>NautilusTrader Packages</title></head>' >> index.html
          echo '<body><h1>Links for nautilus-trader</h1>' >> index.html

          files=$(aws s3 ls "s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')
          for file in $files; do
            aws s3 cp "s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file" \
              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} "$file"
            hash=$(sha256sum "$file" | awk '{print $1}')
            escaped_file=$(echo "$file" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g')
            echo "<a href=\"$escaped_file#sha256=$hash\">$escaped_file</a><br>" >> index.html
            rm "$file"
          done

          echo '</body></html>' >> index.html

          aws s3 cp index.html "s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html" \
            --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \
            --content-type "text/html; charset=utf-8"

      - name: Verify uploaded files in Cloudflare R2
        run: |
          set -euo pipefail
          echo "Verifying uploaded files in Cloudflare R2..."

          if ! aws s3 ls "s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then
            echo "Failed to list files in R2 bucket"
            exit 1
          fi

          # Verify index.html exists
          if ! aws s3 ls "s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then
            echo "index.html not found in R2 bucket"
            exit 1
          fi
          echo "Verification completed successfully."

      - name: Clean up local artifacts
        run: |
          set -euo pipefail
          ls -lh dist/ || echo "No dist directory found"
          rm -rf dist/* 2>/dev/null || true
          echo "Cleanup completed"

      - name: Get artifact IDs for current run
        id: list-artifacts
        run: |
          set -euo pipefail
          echo "Fetching artifact IDs for the current run..."

          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
          echo "$response" > artifacts.json
          ids=$(jq -r '.artifacts[].id' artifacts.json)
          echo "ARTIFACT_IDS=$ids" >> $GITHUB_ENV
          echo "Artifact IDs fetched successfully"

      - name: Delete artifacts for current run
        if: success()
        run: |
          set -euo pipefail
          echo "Deleting artifacts for the current run..."

          for id in ${{ env.ARTIFACT_IDS }}; do
            echo "Deleting artifact ID: $id"
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id
            echo "Deleted artifact $id"
          done
          echo "Artifacts deleted successfully"
